const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const { User, Doctor, Patient, Staff, Management, Location, Service, Medicine, Appointment, MedicalRecord, Prescription, DoctorSchedule, StaffSchedule, Equipment, EquipmentIssue, Invoice, Notification, Verification } = require('../models');
require('dotenv').config();

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/dental_clinic');
    console.log('MongoDB Connected for seeding...');
  } catch (error) {
    console.error('MongoDB connection error:', error);
    process.exit(1);
  }
};

const seedData = async () => {
  try {
    console.log('üå± Starting data seeding...\n');

    // Clear existing data to avoid conflicts
    console.log('üßπ Clearing existing data...');
    await Location.deleteMany({});
    await Service.deleteMany({});
    await Medicine.deleteMany({});
    await User.deleteMany({});
    await Doctor.deleteMany({});
    await Patient.deleteMany({});
    await Staff.deleteMany({});
    await Management.deleteMany({});
    await Appointment.deleteMany({});
    await MedicalRecord.deleteMany({});
    await Prescription.deleteMany({});
    await DoctorSchedule.deleteMany({});
    await StaffSchedule.deleteMany({});
    await Equipment.deleteMany({});
    await EquipmentIssue.deleteMany({});
    await Invoice.deleteMany({});
    await Notification.deleteMany({});
    await Verification.deleteMany({});
    console.log('‚úÖ Existing data cleared');

    // 1. CREATE LOCATIONS
    console.log('üè• Creating locations...');
    const locations = [
      {
        locationId: 'LOC001',
        name: 'Ph√≤ng kh√°m Nha khoa ABC',
        address: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM',
        phone: '0281234567',
        email: 'info@dentalclinic.com',
        isActive: true
      },
      {
        locationId: 'LOC002', 
        name: 'Chi nh√°nh Nha khoa ABC - H√† N·ªôi',
        address: '456 ƒê∆∞·ªùng XYZ, Qu·∫≠n Ba ƒê√¨nh, H√† N·ªôi',
        phone: '0241234567',
        email: 'hanoi@dentalclinic.com',
        isActive: true
      }
    ];

    for (const locationData of locations) {
      const existingLocation = await Location.findOne({ locationId: locationData.locationId });
      if (!existingLocation) {
        const location = new Location(locationData);
        await location.save();
        console.log(`‚úÖ Created location: ${location.name}`);
      } else {
        console.log(`‚ÑπÔ∏è Location already exists: ${locationData.name}`);
      }
    }

    // 2. CREATE SERVICES
    console.log('\nü¶∑ Creating services...');
    const services = [
      {
        serviceId: 'SVC001',
        name: 'Kh√°m rƒÉng t·ªïng qu√°t',
        description: 'Kh√°m v√† ƒë√°nh gi√° t√¨nh tr·∫°ng rƒÉng mi·ªáng t·ªïng th·ªÉ',
        category: 'Kh√°m b·ªánh',
        price: 100000,
        duration: 30,
        isActive: true
      },
      {
        serviceId: 'SVC002',
        name: 'C·∫°o v√¥i rƒÉng',
        description: 'L√†m s·∫°ch v√¥i rƒÉng v√† m·∫£ng b√°m',
        category: 'V·ªá sinh rƒÉng mi·ªáng',
        price: 150000,
        duration: 45,
        isActive: true
      },
      {
        serviceId: 'SVC003',
        name: 'Tr√°m rƒÉng',
        description: 'Tr√°m rƒÉng s√¢u b·∫±ng composite',
        category: 'ƒêi·ªÅu tr·ªã',
        price: 200000,
        duration: 60,
        isActive: true
      }
    ];

    for (const serviceData of services) {
      const existingService = await Service.findOne({ serviceId: serviceData.serviceId });
      if (!existingService) {
        const service = new Service(serviceData);
        await service.save();
        console.log(`‚úÖ Created service: ${service.name}`);
      } else {
        console.log(`‚ÑπÔ∏è Service already exists: ${serviceData.name}`);
      }
    }

    // 3. CREATE MEDICINES
    console.log('\nüíä Creating medicines...');
    const medicines = [
      {
        medicineId: 'MED001',
        name: 'Paracetamol 500mg',
        description: 'Thu·ªëc gi·∫£m ƒëau, h·∫° s·ªët',
        category: 'Gi·∫£m ƒëau',
        price: 5000,
        unit: 'vi√™n',
        stock: 1000,
        isActive: true
      },
      {
        medicineId: 'MED002',
        name: 'Amoxicillin 500mg',
        description: 'Kh√°ng sinh ƒëi·ªÅu tr·ªã nhi·ªÖm khu·∫©n',
        category: 'Kh√°ng sinh',
        price: 15000,
        unit: 'vi√™n',
        stock: 500,
        isActive: true
      }
    ];

    for (const medicineData of medicines) {
      const existingMedicine = await Medicine.findOne({ medicineId: medicineData.medicineId });
      if (!existingMedicine) {
        const medicine = new Medicine(medicineData);
        await medicine.save();
        console.log(`‚úÖ Created medicine: ${medicine.name}`);
      } else {
        console.log(`‚ÑπÔ∏è Medicine already exists: ${medicineData.name}`);
      }
    }

    // 4. CREATE USERS AND PROFILES
    console.log('\nüë• Creating users and profiles...');

    // Admin User
    const adminExists = await User.findOne({ role: 'admin' });
    if (!adminExists) {
      const adminUser = new User({
        fullName: 'Nguy·ªÖn VƒÉn Admin',
        email: 'admin@dentalclinic.com',
        phone: '0901234567',
        password: await bcrypt.hash('admin123', 12),
        role: 'admin',
        isActive: true
      });
      await adminUser.save();
      console.log('‚úÖ Created Admin: admin@dentalclinic.com / admin123');
    } else {
      console.log('‚ÑπÔ∏è Admin already exists: admin@dentalclinic.com / admin123');
    }

    // Doctor User
    const doctorExists = await User.findOne({ role: 'doctor' });
    if (!doctorExists) {
      const doctorUser = new User({
        fullName: 'B√°c sƒ© Nguy·ªÖn VƒÉn B√°c',
        email: 'doctor@dentalclinic.com',
        phone: '0901234568',
        password: await bcrypt.hash('doctor123', 12),
        role: 'doctor',
        isActive: true
      });
      await doctorUser.save();

      const doctorProfile = new Doctor({
        user: doctorUser._id,
        doctorId: 'DOC001',
        specializations: ['Nha khoa T·ªïng qu√°t', 'Ch·ªânh nha'],
        consultationFee: 200000,
        biography: 'B√°c sƒ© c√≥ 10 nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c nha khoa',
        languages: ['Ti·∫øng Vi·ªát', 'Ti·∫øng Anh'],
        workSchedule: {
          monday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          tuesday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          wednesday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          thursday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          friday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          saturday: { startTime: '08:00', endTime: '12:00', isWorking: true },
          sunday: { startTime: null, endTime: null, isWorking: false }
        },
        rating: 4.8,
        totalRatings: 150,
        isAcceptingNewPatients: true,
        availability: {
          isOnline: true,
          status: 'available',
          lastSeen: new Date()
        }
      });
      await doctorProfile.save();
      console.log('‚úÖ Created Doctor: doctor@dentalclinic.com / doctor123');
    } else {
      console.log('‚ÑπÔ∏è Doctor already exists: doctor@dentalclinic.com / doctor123');
    }

    // Receptionist Staff
    const receptionistExists = await User.findOne({ email: 'receptionist@dentalclinic.com' });
    if (!receptionistExists) {
      const receptionistUser = new User({
        fullName: 'L·ªÖ t√¢n Tr·∫ßn Th·ªã L·ªÖ',
        email: 'receptionist@dentalclinic.com',
        phone: '0901234569',
        password: await bcrypt.hash('staff123', 12),
        role: 'staff',
        isActive: true
      });
      await receptionistUser.save();

      const staffProfile = new Staff({
        user: receptionistUser._id,
        staffType: 'receptionist',
        profile: {
          workExperience: '5 nƒÉm kinh nghi·ªám l·ªÖ t√¢n',
          previousWorkplace: 'B·ªánh vi·ªán ABC',
          collegeDegree: 'Cao ƒë·∫≥ng Qu·∫£n tr·ªã vƒÉn ph√≤ng',
          universityDegree: 'ƒê·∫°i h·ªçc Kinh t·∫ø'
        },
        permissions: {
          viewReceptionistSchedule: true,
          viewPatientInfo: true,
          editOwnProfile: true,
          createInvoice: true,
          editPatientInfo: true
        }
      });
      await staffProfile.save();
      console.log('‚úÖ Created Receptionist: receptionist@dentalclinic.com / staff123');
    } else {
      console.log('‚ÑπÔ∏è Receptionist already exists: receptionist@dentalclinic.com / staff123');
    }

    // Store Keeper Staff
    const storeKeeperExists = await User.findOne({ email: 'storekeeper@dentalclinic.com' });
    if (!storeKeeperExists) {
      const storeKeeperUser = new User({
        fullName: 'Kho thu·ªëc L√™ VƒÉn Kho',
        email: 'storekeeper@dentalclinic.com',
        phone: '0901234570',
        password: await bcrypt.hash('store123', 12),
        role: 'staff',
        isActive: true
      });
      await storeKeeperUser.save();

      const staffProfile = new Staff({
        user: storeKeeperUser._id,
        staffType: 'storeKepper',
        profile: {
          workExperience: '3 nƒÉm qu·∫£n l√Ω kho thu·ªëc',
          previousWorkplace: 'Nh√† thu·ªëc XYZ',
          collegeDegree: 'Cao ƒë·∫≥ng D∆∞·ª£c',
          universityDegree: 'ƒê·∫°i h·ªçc D∆∞·ª£c'
        },
        permissions: {
          viewStoreKepperSchedule: true,
          viewPrescriptions: true,
          viewInventory: true,
          createMedicine: true,
          updateMedicine: true,
          deleteMedicine: true,
          viewEquipment: true,
          createEquipment: true,
          updateEquipment: true
        }
      });
      await staffProfile.save();
      console.log('‚úÖ Created Store Keeper: storekeeper@dentalclinic.com / store123');
    } else {
      console.log('‚ÑπÔ∏è Store Keeper already exists: storekeeper@dentalclinic.com / store123');
    }

    // Management
    const managementExists = await User.findOne({ role: 'management' });
    if (!managementExists) {
      const managementUser = new User({
        fullName: 'Qu·∫£n l√Ω Ph·∫°m VƒÉn Qu·∫£n',
        email: 'management@dentalclinic.com',
        phone: '0901234571',
        password: await bcrypt.hash('management123', 12),
        role: 'management',
        isActive: true
      });
      await managementUser.save();

      const managementProfile = new Management({
        user: managementUser._id,
        staffType: 'management',
        profile: {
          workExperience: '8 nƒÉm qu·∫£n l√Ω y t·∫ø',
          previousWorkplace: 'B·ªánh vi·ªán DEF',
          collegeDegree: 'Cao ƒë·∫≥ng Qu·∫£n l√Ω y t·∫ø',
          universityDegree: 'Th·∫°c sƒ© Qu·∫£n l√Ω y t·∫ø'
        },
        permissions: {
          viewReceptionistSchedule: true,
          viewPatientInfo: true,
          editOwnProfile: true,
          createInvoice: true,
          editPatientInfo: true,
          viewStoreKepperSchedule: true,
          viewPrescriptions: true,
          viewInventory: true,
          createMedicine: true,
          updateMedicine: true,
          deleteMedicine: true,
          viewEquipment: true,
          createEquipment: true,
          updateEquipment: true
        }
      });
      await managementProfile.save();
      console.log('‚úÖ Created Management: management@dentalclinic.com / management123');
    } else {
      console.log('‚ÑπÔ∏è Management already exists: management@dentalclinic.com / management123');
    }

    // Patient
    const patientExists = await User.findOne({ role: 'patient' });
    if (!patientExists) {
      const patientUser = new User({
        fullName: 'B·ªánh nh√¢n Ho√†ng Th·ªã B·ªánh',
        email: 'patient@dentalclinic.com',
        phone: '0901234572',
        password: await bcrypt.hash('patient123', 12),
        role: 'patient',
        isActive: true
      });
      await patientUser.save();

      const patientProfile = new Patient({
        user: patientUser._id,
        patientId: 'PAT001',
        basicInfo: {
          fullName: 'B·ªánh nh√¢n Ho√†ng Th·ªã B·ªánh',
          dateOfBirth: new Date('1990-05-15'),
          gender: 'female',
          idCard: {
            idNumber: '123456789',
            issuedDate: new Date('2010-01-01'),
            issuedPlace: 'H√† N·ªôi'
          }
        },
        contactInfo: {
          phone: '0901234572',
          email: 'patient@dentalclinic.com',
          address: {
            street: '123 ƒê∆∞·ªùng ABC',
            ward: 'Ph∆∞·ªùng 1',
            district: 'Qu·∫≠n 1',
            city: 'H√† N·ªôi',
            state: 'H√† N·ªôi',
            zipCode: '100000'
          },
          emergencyContact: {
            name: 'Nguy·ªÖn VƒÉn Kh·∫©n c·∫•p',
            phone: '0901234573',
            relationship: 'Ch·ªìng'
          }
        },
        medicalHistory: [
          {
            condition: 'S√¢u rƒÉng',
            year: 2020,
            notes: 'ƒê√£ ƒëi·ªÅu tr·ªã t·∫°i ph√≤ng kh√°m ABC'
          }
        ],
        allergies: [
          {
            allergen: 'Penicillin',
            severity: 'Nh·∫π',
            reaction: 'Ph√°t ban nh·∫π'
          }
        ],
        insuranceInfo: 'B·∫£o hi·ªÉm y t·∫ø',
        preferredLanguage: 'Ti·∫øng Vi·ªát',
        isActive: true
      });
      await patientProfile.save();
      console.log('‚úÖ Created Patient: patient@dentalclinic.com / patient123');
    } else {
      console.log('‚ÑπÔ∏è Patient already exists: patient@dentalclinic.com / patient123');
    }

    // 5. CREATE DOCTOR SCHEDULES
    console.log('\nüìÖ Creating doctor schedules...');
    
    // Get doctor profile and location
    const doctorUser = await User.findOne({ email: 'doctor@dentalclinic.com' });
    const doctorProfile = await Doctor.findOne({ user: doctorUser._id });
    const location = await Location.findOne();
    const managementUser = await User.findOne({ email: 'management@dentalclinic.com' });
    const managementProfile = await Management.findOne({ user: managementUser._id });
    
    const doctorSchedule = new DoctorSchedule({
      doctor: doctorProfile._id,
      location: location._id,
      date: new Date(),
      startTime: '08:00',
      endTime: '17:00',
      createdBy: managementProfile._id,
      isAvailable: true,
      notes: 'L·ªãch l√†m vi·ªác h√†ng ng√†y c·ªßa b√°c sƒ©'
    });
    await doctorSchedule.save();
    console.log('‚úÖ Created doctor schedule');

    // 6. CREATE SAMPLE APPOINTMENTS
    console.log('\nüìÖ Creating sample appointments...');
    
    // Get patient profile and medicines
    const patientUser = await User.findOne({ email: 'patient@dentalclinic.com' });
    const patientProfile = await Patient.findOne({ user: patientUser._id });
    const medicinesList = await Medicine.find();
    
    // T·∫°o nhi·ªÅu b·ªánh nh√¢n ƒë·ªÉ test ƒëa d·∫°ng
    const patients = [];
    const patientUsers = [
      { email: 'patient1@dentalclinic.com', password: 'patient123', fullName: 'Nguy·ªÖn VƒÉn An', phone: '0901234567' },
      { email: 'patient2@dentalclinic.com', password: 'patient123', fullName: 'Tr·∫ßn Th·ªã B√¨nh', phone: '0901234568' },
      { email: 'patient3@dentalclinic.com', password: 'patient123', fullName: 'L√™ VƒÉn C∆∞·ªùng', phone: '0901234569' },
      { email: 'patient4@dentalclinic.com', password: 'patient123', fullName: 'Ph·∫°m Th·ªã Dung', phone: '0901234570' },
      { email: 'patient5@dentalclinic.com', password: 'patient123', fullName: 'Ho√†ng VƒÉn Em', phone: '0901234571' }
    ];

    for (const userData of patientUsers) {
      const user = new User({
        email: userData.email,
        password: userData.password,
        fullName: userData.fullName,
        phone: userData.phone,
        role: 'patient'
      });
      await user.save();

      const patient = new Patient({
        user: user._id,
        basicInfo: {
          fullName: userData.fullName,
          dateOfBirth: new Date(1990 + Math.floor(Math.random() * 30), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
          gender: Math.random() > 0.5 ? 'male' : 'female',
          idCard: {
            idNumber: `${Math.floor(Math.random() * 900000000) + 100000000}`
          }
        },
        contactInfo: {
          phone: userData.phone,
          email: userData.email,
          address: {
            street: `${Math.floor(Math.random() * 999) + 1} ƒê∆∞·ªùng ${['L√™ L·ª£i', 'Nguy·ªÖn Hu·ªá', 'ƒêi·ªán Bi√™n Ph·ªß', 'C√°ch M·∫°ng Th√°ng 8'][Math.floor(Math.random() * 4)]}`,
            city: 'TP.HCM',
            state: 'TP.HCM',
            zipCode: '700000'
          }
        },
        insuranceInfo: 'B·∫£o hi·ªÉm y t·∫ø',
        medicalHistory: [
          {
            condition: 'S√¢u rƒÉng',
            year: '2023',
            notes: 'ƒê√£ ƒëi·ªÅu tr·ªã th√†nh c√¥ng'
          },
          {
            condition: 'Vi√™m n∆∞·ªõu',
            year: '2022',
            notes: 'ƒê√£ kh·ªèi ho√†n to√†n'
          }
        ]
      });
      await patient.save();
      patients.push(patient);
      console.log(`‚úÖ Created patient: ${userData.fullName}`);
    }

    const appointments = [
      // ==================== H√îM NAY - TEST LU·ªíNG DOCTOR ====================
      // Checked-in - ƒê√£ check-in (Test: B·∫Øt ƒë·∫ßu kh√°m, T·∫°m ho√£n)
      {
        appointmentId: 'APT001',
        doctor: doctorProfile._id,
        patient: patients[0]._id,
        schedule: doctorSchedule._id,
        appointmentDate: new Date(),
        startTime: '09:00',
        endTime: '09:30',
        status: 'checked-in',
        reasonForVisit: 'Kh√°m rƒÉng t·ªïng qu√°t',
        notes: 'B·ªánh nh√¢n ƒë√£ check-in, s·∫µn s√†ng kh√°m'
      },
      // On-hold - T·∫°m ho√£n (Test: Ti·∫øp t·ª•c kh√°m)
      {
        appointmentId: 'APT002',
        doctor: doctorProfile._id,
        patient: patients[1]._id,
        schedule: doctorSchedule._id,
        appointmentDate: new Date(),
        startTime: '10:00',
        endTime: '10:30',
        status: 'on-hold',
        reasonForVisit: 'ƒêau rƒÉng h√†m d∆∞·ªõi',
        notes: 'B·ªánh nh√¢n t·∫°m r·ªùi ƒëi nghe ƒëi·ªán tho·∫°i',
        onHoldAt: new Date(Date.now() - 15 * 60 * 1000) // 15 ph√∫t tr∆∞·ªõc
      },
      // In-progress - ƒêang kh√°m (Test: Ho√†n th√†nh)
      {
        appointmentId: 'APT003',
        doctor: doctorProfile._id,
        patient: patients[2]._id,
        schedule: doctorSchedule._id,
        appointmentDate: new Date(),
        startTime: '11:00',
        endTime: '11:45',
        status: 'in-progress',
        reasonForVisit: 'ƒêi·ªÅu tr·ªã t·ªßy rƒÉng',
        notes: 'ƒêang ti·∫øn h√†nh ƒëi·ªÅu tr·ªã t·ªßy'
      },
      // Completed - ƒê√£ ho√†n th√†nh (Test: Xem th√¥ng tin)
      {
        appointmentId: 'APT004',
        doctor: doctorProfile._id,
        patient: patients[3]._id,
        schedule: doctorSchedule._id,
        appointmentDate: new Date(),
        startTime: '14:00',
        endTime: '14:30',
        status: 'completed',
        reasonForVisit: 'C·∫°o v√¥i rƒÉng',
        notes: 'Kh√°m xong, d·∫∑n d√≤ v·ªá sinh rƒÉng mi·ªáng'
      },
      // No-show - Kh√¥ng ƒë·∫øn (Test: Xem th√¥ng tin)
      {
        appointmentId: 'APT005',
        doctor: doctorProfile._id,
        patient: patients[4]._id,
        schedule: doctorSchedule._id,
        appointmentDate: new Date(),
        startTime: '15:00',
        endTime: '15:30',
        status: 'no-show',
        reasonForVisit: 'T√°i kh√°m',
        notes: 'B·ªánh nh√¢n kh√¥ng ƒë·∫øn, ƒë√£ g·ªçi ƒëi·ªán'
      },
      // Cancelled - ƒê√£ h·ªßy (Test: Xem th√¥ng tin)
      {
        appointmentId: 'APT006',
        doctor: doctorProfile._id,
        patient: patients[0]._id,
        schedule: doctorSchedule._id,
        appointmentDate: new Date(),
        startTime: '16:00',
        endTime: '16:30',
        status: 'cancelled',
        reasonForVisit: 'T∆∞ v·∫•n ch·ªânh nha',
        notes: 'H·ªßy do tr√πng l·ªãch c√° nh√¢n'
      },

      // ==================== H√îM QUA - L·ªäCH S·ª¨ ====================
      // Completed - ƒê√£ ho√†n th√†nh
      {
        appointmentId: 'APT007',
        doctor: doctorProfile._id,
        patient: patients[1]._id,
        schedule: doctorSchedule._id,
        appointmentDate: new Date(Date.now() - 24 * 60 * 60 * 1000),
        startTime: '09:00',
        endTime: '09:30',
        status: 'completed',
        reasonForVisit: 'Tr√°m rƒÉng s√¢u',
        notes: 'ƒêi·ªÅu tr·ªã th√†nh c√¥ng, b·ªánh nh√¢n h√†i l√≤ng'
      },
      // Completed - ƒê√£ ho√†n th√†nh
      {
        appointmentId: 'APT008',
        doctor: doctorProfile._id,
        patient: patients[2]._id,
        schedule: doctorSchedule._id,
        appointmentDate: new Date(Date.now() - 24 * 60 * 60 * 1000),
        startTime: '14:00',
        endTime: '14:30',
        status: 'completed',
        reasonForVisit: 'Kh√°m ƒë·ªãnh k·ª≥',
        notes: 'Ki·ªÉm tra s·ª©c kh·ªèe rƒÉng mi·ªáng'
      },
      // No-show - Kh√¥ng ƒë·∫øn
      {
        appointmentId: 'APT009',
        doctor: doctorProfile._id,
        patient: patients[3]._id,
        schedule: doctorSchedule._id,
        appointmentDate: new Date(Date.now() - 24 * 60 * 60 * 1000),
        startTime: '15:00',
        endTime: '15:30',
        status: 'no-show',
        reasonForVisit: 'T∆∞ v·∫•n ch·ªânh nha',
        notes: 'B·ªánh nh√¢n kh√¥ng ƒë·∫øn'
      },

      // ==================== NG√ÄY MAI - L·ªäCH S·∫ÆP T·ªöI ====================
      // Checked-in - ƒê√£ check-in (Test: C√≥ th·ªÉ test lu·ªìng)
      {
        appointmentId: 'APT010',
        doctor: doctorProfile._id,
        patient: patients[4]._id,
        schedule: doctorSchedule._id,
        appointmentDate: new Date(Date.now() + 24 * 60 * 60 * 1000),
        startTime: '09:00',
        endTime: '09:30',
        status: 'checked-in',
        reasonForVisit: 'Kh√°m rƒÉng tr·∫ª em',
        notes: 'B·ªánh nh√¢n nh·ªè tu·ªïi, c·∫ßn ch√∫ √Ω'
      },
      // On-hold - T·∫°m ho√£n (Test: C√≥ th·ªÉ test lu·ªìng)
      {
        appointmentId: 'APT011',
        doctor: doctorProfile._id,
        patient: patients[0]._id,
        schedule: doctorSchedule._id,
        appointmentDate: new Date(Date.now() + 24 * 60 * 60 * 1000),
        startTime: '14:00',
        endTime: '14:30',
        status: 'on-hold',
        reasonForVisit: 'C·∫°o v√¥i rƒÉng',
        notes: 'B·ªánh nh√¢n t·∫°m r·ªùi ƒëi',
        onHoldAt: new Date(Date.now() - 10 * 60 * 1000) // 10 ph√∫t tr∆∞·ªõc
      },
      // Completed - ƒê√£ ho√†n th√†nh (Test: Xem th√¥ng tin)
      {
        appointmentId: 'APT012',
        doctor: doctorProfile._id,
        patient: patients[1]._id,
        schedule: doctorSchedule._id,
        appointmentDate: new Date(Date.now() + 24 * 60 * 60 * 1000),
        startTime: '15:00',
        endTime: '15:30',
        status: 'completed',
        reasonForVisit: 'T√°i kh√°m',
        notes: 'Ki·ªÉm tra k·∫øt qu·∫£ ƒëi·ªÅu tr·ªã'
      },

      // ==================== TU·∫¶N SAU - L·ªäCH XA ====================
      // Checked-in - ƒê√£ check-in (Test: C√≥ th·ªÉ test lu·ªìng)
      {
        appointmentId: 'APT013',
        doctor: doctorProfile._id,
        patient: patients[2]._id,
        schedule: doctorSchedule._id,
        appointmentDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
        startTime: '10:00',
        endTime: '10:30',
        status: 'checked-in',
        reasonForVisit: 'T∆∞ v·∫•n ch·ªânh nha',
        notes: 'B·ªánh nh√¢n quan t√¢m ch·ªânh nha'
      },
      // Cancelled - ƒê√£ h·ªßy (Test: Xem th√¥ng tin)
      {
        appointmentId: 'APT014',
        doctor: doctorProfile._id,
        patient: patients[3]._id,
        schedule: doctorSchedule._id,
        appointmentDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
        startTime: '15:00',
        endTime: '15:30',
        status: 'cancelled',
        reasonForVisit: 'Kh√°m t·ªïng qu√°t',
        notes: 'H·ªßy do tr√πng l·ªãch'
      }
    ];

    for (const appointmentData of appointments) {
      const appointment = new Appointment(appointmentData);
      await appointment.save();
      console.log(`‚úÖ Created appointment: ${appointment.appointmentId}`);
    }

    // 7. CREATE SAMPLE MEDICAL RECORDS
    console.log('\nüìã Creating sample medical records...');
    const medicalRecord = new MedicalRecord({
      recordId: 'MR000001',
      patient: patientProfile._id,
      doctor: doctorProfile._id,
      appointment: appointments[0]._id,
      visitDate: new Date(),
      chiefComplaint: 'ƒêau rƒÉng h√†m d∆∞·ªõi b√™n tr√°i',
      presentIllness: 'ƒêau rƒÉng k√©o d√†i 3 ng√†y, ƒëau tƒÉng khi nhai',
      clinicalExamination: {
        generalAppearance: 'T√¨nh tr·∫°ng chung t·ªët',
        vitalSigns: {
          bloodPressure: '120/80',
          heartRate: 72,
          temperature: 36.5,
          respiratoryRate: 16
        },
        oralExamination: {
          teeth: {
            condition: 'RƒÉng s·ªë 36 c√≥ l·ªó s√¢u l·ªõn',
            missingTeeth: [],
            filledTeeth: ['RƒÉng s·ªë 16'],
            decayedTeeth: ['RƒÉng s·ªë 36']
          },
          gums: {
            condition: 'N∆∞·ªõu h·ªìng h√†o, kh√¥ng s∆∞ng',
            bleeding: false,
            swelling: false
          },
          tongue: {
            condition: 'L∆∞·ª°i b√¨nh th∆∞·ªùng',
            coating: 'M·ªèng, m√†u tr·∫Øng nh·∫°t'
          },
          mucosa: {
            condition: 'Ni√™m m·∫°c b√¨nh th∆∞·ªùng',
            lesions: []
          }
        },
        dentalExamination: {
          occlusion: 'Kh·ªõp c·∫Øn b√¨nh th∆∞·ªùng',
          tmj: 'Kh·ªõp th√°i d∆∞∆°ng h√†m b√¨nh th∆∞·ªùng',
          periodontal: 'Nha chu kh·ªèe m·∫°nh',
          endodontic: 'T·ªßy rƒÉng s·ªë 36 b·ªã vi√™m',
          orthodontic: 'RƒÉng m·ªçc th·∫≥ng h√†ng'
        }
      },
      diagnosis: {
        primary: 'Vi√™m t·ªßy rƒÉng c·∫•p t√≠nh',
        secondary: ['S√¢u rƒÉng l·ªõn'],
        differential: ['Vi√™m nha chu', '√Åp xe rƒÉng']
      },
      treatmentPlan: {
        immediate: ['Gi·∫£m ƒëau', 'L√†m s·∫°ch l·ªó s√¢u'],
        shortTerm: ['ƒêi·ªÅu tr·ªã t·ªßy rƒÉng', 'Tr√°m b√≠t ·ªëng t·ªßy'],
        longTerm: ['Ph·ª•c h√¨nh rƒÉng', 'Theo d√µi ƒë·ªãnh k·ª≥'],
        followUp: {
          nextVisit: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
          interval: '1 tu·∫ßn',
          instructions: 'U·ªëng thu·ªëc ƒë√∫ng li·ªÅu, tr√°nh nhai m·∫°nh'
        }
      },
      treatmentPerformed: [{
        procedure: 'L√†m s·∫°ch l·ªó s√¢u',
        date: new Date(),
        notes: 'Lo·∫°i b·ªè m√¥ s√¢u, chu·∫©n b·ªã cho ƒëi·ªÅu tr·ªã t·ªßy',
        materials: ['M≈©i khoan nha khoa', 'Thu·ªëc s√°t khu·∫©n'],
        cost: 200000
      }],
      status: 'draft',
      followUpRequired: true,
      followUpDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
      followUpNotes: 'Ki·ªÉm tra t√¨nh tr·∫°ng t·ªßy rƒÉng sau ƒëi·ªÅu tr·ªã',
      createdBy: doctorProfile._id,
      notes: 'C·∫ßn ƒëi·ªÅu tr·ªã trong 2-3 l·∫ßn h·∫πn'
    });
    await medicalRecord.save();
    console.log('‚úÖ Created medical record');

    // 8. CREATE SAMPLE PRESCRIPTIONS
    console.log('\nüíä Creating sample prescriptions...');
    const prescription = new Prescription({
      patient: patientProfile._id,
      doctor: doctorProfile._id,
      appointment: appointments[0]._id,
      medications: [
        {
          medicine: medicinesList[0]._id, // Paracetamol
          quantity: 20,
          dosage: '500mg x 3 l·∫ßn/ng√†y x 5 ng√†y'
        },
        {
          medicine: medicinesList[1]._id, // Amoxicillin
          quantity: 14,
          dosage: '500mg x 2 l·∫ßn/ng√†y x 7 ng√†y'
        }
      ],
      instructions: 'U·ªëng thu·ªëc ƒë√∫ng li·ªÅu, t√°i kh√°m sau 1 tu·∫ßn',
      status: 'unfinished'
    });
    await prescription.save();
    console.log('‚úÖ Created prescription');

    console.log('\nüéâ Data seeding completed successfully!');
    console.log('\nüìã TEST ACCOUNTS:');
    console.log('================');
    console.log('üëë Admin: admin@dentalclinic.com / admin123');
    console.log('üë®‚Äç‚öïÔ∏è Doctor: doctor@dentalclinic.com / doctor123');
    console.log('üè• Receptionist: receptionist@dentalclinic.com / staff123');
    console.log('üì¶ Store Keeper: storekeeper@dentalclinic.com / store123');
    console.log('üëî Management: management@dentalclinic.com / management123');
    console.log('üë§ Patient: patient@dentalclinic.com / patient123');
    
    console.log('\nüöÄ You can now start the application:');
    console.log('1. Backend: npm run dev');
    console.log('2. Frontend: npm start');
    console.log('3. Login with any account above');

  } catch (error) {
    console.error('‚ùå Error seeding data:', error);
  } finally {
    mongoose.connection.close();
  }
};

// Run the script
if (require.main === module) {
  connectDB().then(() => {
    seedData();
  });
}

module.exports = { seedData };
