const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
require('dotenv').config();

// Import models
const { User, Doctor, Patient, Appointment, Service, DoctorSchedule, Location, MedicalRecord } = require('../models');

// Connect to MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/dental_clinic');
    console.log('MongoDB Connected for seeding...');
  } catch (error) {
    console.error('Database connection error:', error.message);
    process.exit(1);
  }
};

// Clear existing data
const clearData = async () => {
  try {
    console.log('üßπ Clearing existing data...');
    await User.deleteMany({});
    await Doctor.deleteMany({});
    await Patient.deleteMany({});
    await Appointment.deleteMany({});
    await Service.deleteMany({});
    await DoctorSchedule.deleteMany({});
    await Location.deleteMany({});
    await MedicalRecord.deleteMany({});
    console.log('‚úÖ Data cleared successfully');
  } catch (error) {
    console.error('Error clearing data:', error);
  }
};

// Create locations
const createLocations = async () => {
  try {
    console.log('üè• Creating locations...');
    const locations = [
      {
        name: 'Ph√≤ng kh√°m Nha khoa H√† N·ªôi',
        address: {
          street: '123 ƒê∆∞·ªùng L√°ng',
          city: 'H√† N·ªôi',
          state: 'H√† N·ªôi',
          zipCode: '100000',
          country: 'Vi·ªát Nam'
        },
        phone: '024-1234-5678',
        email: 'hanoi@dentalclinic.com',
        isActive: true
      },
      {
        name: 'Ph√≤ng kh√°m Nha khoa TP.HCM',
        address: {
          street: '456 ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá',
          city: 'TP.HCM',
          state: 'TP.HCM',
          zipCode: '700000',
          country: 'Vi·ªát Nam'
        },
        phone: '028-8765-4321',
        email: 'hcm@dentalclinic.com',
        isActive: true
      }
    ];

    const createdLocations = await Location.insertMany(locations);
    console.log('‚úÖ Locations created:', createdLocations.length);
    return createdLocations;
  } catch (error) {
    console.error('Error creating locations:', error);
    return [];
  }
};

// Create users (doctors, patients, admin)
const createUsers = async () => {
  try {
    console.log('üë• Creating users...');
    
    // Admin user
    const adminUser = new User({
      fullName: 'Nguy·ªÖn VƒÉn Admin',
      email: 'admin@dentalclinic.com',
      password: 'admin123',
      role: 'admin',
      phone: '0123456789',
      isActive: true,
      isProfileComplete: true
    });
    await adminUser.save();

    // Doctor users
    const doctorUsers = [
      {
        fullName: 'B√°c sƒ© Nguy·ªÖn VƒÉn A',
        email: 'doctor1@dentalclinic.com',
        password: 'doctor123',
        role: 'doctor',
        phone: '0987654321',
        isActive: true,
        isProfileComplete: true
      },
      {
        fullName: 'B√°c sƒ© Tr·∫ßn Th·ªã B',
        email: 'doctor2@dentalclinic.com',
        password: 'doctor123',
        role: 'doctor',
        phone: '0987654322',
        isActive: true,
        isProfileComplete: true
      },
      {
        fullName: 'B√°c sƒ© L√™ VƒÉn C',
        email: 'doctor3@dentalclinic.com',
        password: 'doctor123',
        role: 'doctor',
        phone: '0987654323',
        isActive: true,
        isProfileComplete: true
      }
    ];

    const createdDoctorUsers = await User.insertMany(doctorUsers);

    // Patient users
    const patientUsers = [
      {
        fullName: 'Nguy·ªÖn Th·ªã D',
        email: 'patient1@example.com',
        password: 'patient123',
        role: 'patient',
        phone: '0912345678',
        isActive: true,
        isProfileComplete: true
      },
      {
        fullName: 'Tr·∫ßn VƒÉn E',
        email: 'patient2@example.com',
        password: 'patient123',
        role: 'patient',
        phone: '0912345679',
        isActive: true,
        isProfileComplete: true
      },
      {
        fullName: 'L√™ Th·ªã F',
        email: 'patient3@example.com',
        password: 'patient123',
        role: 'patient',
        phone: '0912345680',
        isActive: true,
        isProfileComplete: true
      },
      {
        fullName: 'Ph·∫°m VƒÉn G',
        email: 'patient4@example.com',
        password: 'patient123',
        role: 'patient',
        phone: '0912345681',
        isActive: true,
        isProfileComplete: true
      },
      {
        fullName: 'Ho√†ng Th·ªã H',
        email: 'patient5@example.com',
        password: 'patient123',
        role: 'patient',
        phone: '0912345682',
        isActive: true,
        isProfileComplete: true
      }
    ];

    const createdPatientUsers = await User.insertMany(patientUsers);

    console.log('‚úÖ Users created:', createdDoctorUsers.length + createdPatientUsers.length + 1);
    return { adminUser, doctorUsers: createdDoctorUsers, patientUsers: createdPatientUsers };
  } catch (error) {
    console.error('Error creating users:', error);
    return { adminUser: null, doctorUsers: [], patientUsers: [] };
  }
};

// Create doctor profiles
const createDoctors = async (doctorUsers, locations) => {
  try {
    console.log('üë®‚Äç‚öïÔ∏è Creating doctor profiles...');
    
    const doctors = [
      {
        user: doctorUsers[0]._id,
        doctorId: 'DOC001',
        credentials: {
          medicalLicense: 'MD-2024-001',
          dentalLicense: 'DDS-2024-001',
          certifications: [
            {
              name: 'Ch·ª©ng ch·ªâ Nha khoa T·ªïng qu√°t',
              issuedBy: 'B·ªô Y t·∫ø Vi·ªát Nam',
              dateIssued: new Date('2020-01-01'),
              expirationDate: new Date('2025-01-01')
            }
          ]
        },
        education: [
          {
            degree: 'B√°c sƒ© RƒÉng H√†m M·∫∑t',
            institution: 'ƒê·∫°i h·ªçc Y H√† N·ªôi',
            graduationYear: 2018,
            fieldOfStudy: 'Nha khoa'
          }
        ],
        specializations: ['Nha khoa T·ªïng qu√°t', 'Nha khoa Th·∫©m m·ªπ', 'Ch·ªânh nha'],
        experience: {
          yearsOfPractice: 6,
          previousPositions: [
            {
              position: 'B√°c sƒ© Nha khoa',
              clinic: 'B·ªánh vi·ªán RƒÉng H√†m M·∫∑t Trung ∆∞∆°ng',
              startDate: new Date('2018-06-01'),
              endDate: new Date('2022-12-31'),
              description: 'Kh√°m v√† ƒëi·ªÅu tr·ªã c√°c b·ªánh rƒÉng mi·ªáng'
            }
          ]
        },
        biography: 'B√°c sƒ© c√≥ h∆°n 6 nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c nha khoa, chuy√™n v·ªÅ nha khoa t·ªïng qu√°t v√† th·∫©m m·ªπ.',
        languages: ['Ti·∫øng Vi·ªát', 'Ti·∫øng Anh'],
        isAcceptingNewPatients: true,
        isActive: true,
        consultationFee: 200000,
        workSchedule: {
          monday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          tuesday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          wednesday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          thursday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          friday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          saturday: { startTime: '08:00', endTime: '12:00', isWorking: true },
          sunday: { startTime: '08:00', endTime: '12:00', isWorking: false }
        },
        rating: 4.8,
        totalRatings: 25,
        availability: {
          isOnline: true,
          lastSeen: new Date(),
          status: 'available'
        }
      },
      {
        user: doctorUsers[1]._id,
        doctorId: 'DOC002',
        credentials: {
          medicalLicense: 'MD-2024-002',
          dentalLicense: 'DDS-2024-002',
          certifications: [
            {
              name: 'Ch·ª©ng ch·ªâ Nha khoa Tr·∫ª em',
              issuedBy: 'B·ªô Y t·∫ø Vi·ªát Nam',
              dateIssued: new Date('2021-01-01'),
              expirationDate: new Date('2026-01-01')
            }
          ]
        },
        education: [
          {
            degree: 'B√°c sƒ© RƒÉng H√†m M·∫∑t',
            institution: 'ƒê·∫°i h·ªçc Y TP.HCM',
            graduationYear: 2019,
            fieldOfStudy: 'Nha khoa Tr·∫ª em'
          }
        ],
        specializations: ['Nha khoa Tr·∫ª em', 'Nha khoa T·ªïng qu√°t'],
        experience: {
          yearsOfPractice: 5,
          previousPositions: [
            {
              position: 'B√°c sƒ© Nha khoa Tr·∫ª em',
              clinic: 'B·ªánh vi·ªán Nhi ƒê·ªìng 1',
              startDate: new Date('2019-07-01'),
              endDate: new Date('2023-12-31'),
              description: 'Chuy√™n kh√°m v√† ƒëi·ªÅu tr·ªã rƒÉng mi·ªáng cho tr·∫ª em'
            }
          ]
        },
        biography: 'B√°c sƒ© chuy√™n v·ªÅ nha khoa tr·∫ª em v·ªõi h∆°n 5 nƒÉm kinh nghi·ªám.',
        languages: ['Ti·∫øng Vi·ªát', 'Ti·∫øng Anh'],
        isAcceptingNewPatients: true,
        isActive: true,
        consultationFee: 180000,
        workSchedule: {
          monday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          tuesday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          wednesday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          thursday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          friday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          saturday: { startTime: '08:00', endTime: '12:00', isWorking: true },
          sunday: { startTime: '08:00', endTime: '12:00', isWorking: false }
        },
        rating: 4.9,
        totalRatings: 18,
        availability: {
          isOnline: true,
          lastSeen: new Date(),
          status: 'available'
        }
      },
      {
        user: doctorUsers[2]._id,
        doctorId: 'DOC003',
        credentials: {
          medicalLicense: 'MD-2024-003',
          dentalLicense: 'DDS-2024-003',
          certifications: [
            {
              name: 'Ch·ª©ng ch·ªâ Ch·ªânh nha',
              issuedBy: 'B·ªô Y t·∫ø Vi·ªát Nam',
              dateIssued: new Date('2022-01-01'),
              expirationDate: new Date('2027-01-01')
            }
          ]
        },
        education: [
          {
            degree: 'B√°c sƒ© RƒÉng H√†m M·∫∑t',
            institution: 'ƒê·∫°i h·ªçc Y H√† N·ªôi',
            graduationYear: 2020,
            fieldOfStudy: 'Ch·ªânh nha'
          }
        ],
        specializations: ['Ch·ªânh nha', 'Nha khoa Th·∫©m m·ªπ'],
        experience: {
          yearsOfPractice: 4,
          previousPositions: [
            {
              position: 'B√°c sƒ© Ch·ªânh nha',
              clinic: 'Ph√≤ng kh√°m Nha khoa Th·∫©m m·ªπ',
              startDate: new Date('2020-08-01'),
              endDate: new Date('2024-01-31'),
              description: 'Chuy√™n v·ªÅ ch·ªânh nha v√† nha khoa th·∫©m m·ªπ'
            }
          ]
        },
        biography: 'B√°c sƒ© chuy√™n v·ªÅ ch·ªânh nha v·ªõi h∆°n 4 nƒÉm kinh nghi·ªám.',
        languages: ['Ti·∫øng Vi·ªát', 'Ti·∫øng Anh', 'Ti·∫øng H√†n'],
        isAcceptingNewPatients: true,
        isActive: true,
        consultationFee: 300000,
        workSchedule: {
          monday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          tuesday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          wednesday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          thursday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          friday: { startTime: '08:00', endTime: '17:00', isWorking: true },
          saturday: { startTime: '08:00', endTime: '12:00', isWorking: true },
          sunday: { startTime: '08:00', endTime: '12:00', isWorking: false }
        },
        rating: 4.7,
        totalRatings: 12,
        availability: {
          isOnline: false,
          lastSeen: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago
          status: 'away'
        }
      }
    ];

    const createdDoctors = await Doctor.insertMany(doctors);
    console.log('‚úÖ Doctor profiles created:', createdDoctors.length);
    return createdDoctors;
  } catch (error) {
    console.error('Error creating doctors:', error);
    return [];
  }
};

// Create patient profiles
const createPatients = async (patientUsers) => {
  try {
    console.log('üë§ Creating patient profiles...');
    
    const patients = [
      {
        user: patientUsers[0]._id,
        basicInfo: {
          fullName: 'Nguy·ªÖn Th·ªã D',
          dateOfBirth: new Date('1990-05-15'),
          gender: 'female',
          idCard: {
            idNumber: '123456789'
          }
        },
        medicalHistory: [
          {
            condition: 'Vi√™m n∆∞·ªõu',
            year: 2022,
            notes: 'ƒê√£ ƒëi·ªÅu tr·ªã th√†nh c√¥ng'
          },
          {
            condition: 'S√¢u rƒÉng',
            year: 2021,
            notes: 'Tr√°m rƒÉng s·ªë 6'
          }
        ],
        allergies: [
          {
            allergen: 'Penicillin',
            severity: 'Nh·∫π',
            reaction: 'Ph√°t ban nh·∫π'
          }
        ],
        contactInfo: {
          phone: '0912345678',
          email: 'patient1@example.com',
          address: {
            street: '123 ƒê∆∞·ªùng ABC',
            city: 'H√† N·ªôi',
            state: 'H√† N·ªôi',
            zipCode: '100000',
            country: 'Vi·ªát Nam'
          }
        },
        emergencyContact: {
          name: 'Nguy·ªÖn VƒÉn Ch·ªìng',
          relationship: 'Ch·ªìng',
          phone: '0987654321'
        },
        insuranceInfo: 'B·∫£o hi·ªÉm y t·∫ø',
        isProfileComplete: true,
        completedAt: new Date()
      },
      {
        user: patientUsers[1]._id,
        basicInfo: {
          fullName: 'Tr·∫ßn VƒÉn E',
          dateOfBirth: new Date('1985-08-20'),
          gender: 'male',
          idCard: {
            idNumber: '987654321'
          }
        },
        medicalHistory: [
          {
            condition: 'Vi√™m t·ªßy rƒÉng',
            year: 2023,
            notes: 'ƒê√£ ƒëi·ªÅu tr·ªã t·ªßy rƒÉng s·ªë 7'
          }
        ],
        allergies: [],
        contactInfo: {
          phone: '0912345679',
          email: 'patient2@example.com',
          address: {
            street: '456 ƒê∆∞·ªùng XYZ',
            city: 'TP.HCM',
            state: 'TP.HCM',
            zipCode: '700000',
            country: 'Vi·ªát Nam'
          }
        },
        emergencyContact: {
          name: 'Tr·∫ßn Th·ªã V·ª£',
          relationship: 'V·ª£',
          phone: '0987654322'
        },
        insuranceInfo: 'B·∫£o hi·ªÉm y t·∫ø',
        isProfileComplete: true,
        completedAt: new Date()
      },
      {
        user: patientUsers[2]._id,
        basicInfo: {
          fullName: 'L√™ Th·ªã F',
          dateOfBirth: new Date('1995-12-10'),
          gender: 'female',
          idCard: {
            idNumber: '456789123'
          }
        },
        medicalHistory: [],
        allergies: [
          {
            allergen: 'Aspirin',
            severity: 'N·∫∑ng',
            reaction: 'S·ªëc ph·∫£n v·ªá'
          }
        ],
        contactInfo: {
          phone: '0912345680',
          email: 'patient3@example.com',
          address: {
            street: '789 ƒê∆∞·ªùng DEF',
            city: 'H√† N·ªôi',
            state: 'H√† N·ªôi',
            zipCode: '100000',
            country: 'Vi·ªát Nam'
          }
        },
        emergencyContact: {
          name: 'L√™ VƒÉn Anh',
          relationship: 'Anh trai',
          phone: '0987654323'
        },
        insuranceInfo: 'B·∫£o hi·ªÉm y t·∫ø',
        isProfileComplete: true,
        completedAt: new Date()
      },
      {
        user: patientUsers[3]._id,
        basicInfo: {
          fullName: 'Ph·∫°m VƒÉn G',
          dateOfBirth: new Date('1988-03-25'),
          gender: 'male',
          idCard: {
            idNumber: '789123456'
          }
        },
        medicalHistory: [
          {
            condition: 'RƒÉng kh√¥n m·ªçc l·ªách',
            year: 2022,
            notes: 'ƒê√£ nh·ªï rƒÉng kh√¥n'
          }
        ],
        allergies: [],
        contactInfo: {
          phone: '0912345681',
          email: 'patient4@example.com',
          address: {
            street: '321 ƒê∆∞·ªùng GHI',
            city: 'TP.HCM',
            state: 'TP.HCM',
            zipCode: '700000',
            country: 'Vi·ªát Nam'
          }
        },
        emergencyContact: {
          name: 'Ph·∫°m Th·ªã M·∫π',
          relationship: 'M·∫π',
          phone: '0987654324'
        },
        insuranceInfo: 'B·∫£o hi·ªÉm y t·∫ø',
        isProfileComplete: true,
        completedAt: new Date()
      },
      {
        user: patientUsers[4]._id,
        basicInfo: {
          fullName: 'Ho√†ng Th·ªã H',
          dateOfBirth: new Date('1992-07-08'),
          gender: 'female',
          idCard: {
            idNumber: '321654987'
          }
        },
        medicalHistory: [
          {
            condition: 'Vi√™m nha chu',
            year: 2023,
            notes: 'ƒêang ƒëi·ªÅu tr·ªã'
          }
        ],
        allergies: [
          {
            allergen: 'Ibuprofen',
            severity: 'Trung b√¨nh',
            reaction: 'ƒêau b·ª•ng'
          }
        ],
        contactInfo: {
          phone: '0912345682',
          email: 'patient5@example.com',
          address: {
            street: '654 ƒê∆∞·ªùng JKL',
            city: 'H√† N·ªôi',
            state: 'H√† N·ªôi',
            zipCode: '100000',
            country: 'Vi·ªát Nam'
          }
        },
        emergencyContact: {
          name: 'Ho√†ng VƒÉn B·ªë',
          relationship: 'B·ªë',
          phone: '0987654325'
        },
        insuranceInfo: 'B·∫£o hi·ªÉm y t·∫ø',
        isProfileComplete: true,
        completedAt: new Date()
      }
    ];

    const createdPatients = await Patient.insertMany(patients);
    console.log('‚úÖ Patient profiles created:', createdPatients.length);
    return createdPatients;
  } catch (error) {
    console.error('Error creating patients:', error);
    return [];
  }
};

// Create services
const createServices = async () => {
  try {
    console.log('ü¶∑ Creating services...');
    
    const services = [
      {
        name: 'Kh√°m t·ªïng qu√°t rƒÉng mi·ªáng',
        description: 'Kh√°m t·ªïng qu√°t v√† ƒë√°nh gi√° t√¨nh tr·∫°ng rƒÉng mi·ªáng',
        category: 'Kh√°m b·ªánh',
        price: 100000,
        process: [
          {
            step: 1,
            title: 'Kh√°m t·ªïng qu√°t',
            description: 'Ki·ªÉm tra t·ªïng th·ªÉ t√¨nh tr·∫°ng rƒÉng mi·ªáng'
          },
          {
            step: 2,
            title: 'Ch·ª•p X-quang',
            description: 'Ch·ª•p X-quang ƒë·ªÉ ƒë√°nh gi√° chi ti·∫øt'
          },
          {
            step: 3,
            title: 'T∆∞ v·∫•n ƒëi·ªÅu tr·ªã',
            description: 'T∆∞ v·∫•n k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã ph√π h·ª£p'
          }
        ],
        isActive: true
      },
      {
        name: 'Tr√°m rƒÉng composite',
        description: 'Tr√°m rƒÉng b·∫±ng v·∫≠t li·ªáu composite th·∫©m m·ªπ',
        category: 'ƒêi·ªÅu tr·ªã',
        price: 300000,
        process: [
          {
            step: 1,
            title: 'L√†m s·∫°ch v√πng s√¢u',
            description: 'Lo·∫°i b·ªè ph·∫ßn rƒÉng b·ªã s√¢u'
          },
          {
            step: 2,
            title: 'Tr√°m composite',
            description: 'Tr√°m b·∫±ng v·∫≠t li·ªáu composite'
          },
          {
            step: 3,
            title: 'Ho√†n thi·ªán',
            description: 'M√†i d≈©a v√† ho√†n thi·ªán b·ªÅ m·∫∑t'
          }
        ],
        isActive: true
      },
      {
        name: 'L·∫•y t·ªßy rƒÉng',
        description: 'ƒêi·ªÅu tr·ªã t·ªßy rƒÉng b·ªã vi√™m nhi·ªÖm',
        category: 'ƒêi·ªÅu tr·ªã',
        price: 800000,
        process: [
          {
            step: 1,
            title: 'G√¢y t√™',
            description: 'G√¢y t√™ v√πng rƒÉng c·∫ßn ƒëi·ªÅu tr·ªã'
          },
          {
            step: 2,
            title: 'M·ªü t·ªßy',
            description: 'M·ªü ƒë∆∞·ªùng v√†o bu·ªìng t·ªßy'
          },
          {
            step: 3,
            title: 'L√†m s·∫°ch t·ªßy',
            description: 'Lo·∫°i b·ªè t·ªßy b·ªã vi√™m nhi·ªÖm'
          },
          {
            step: 4,
            title: 'Tr√°m b√≠t',
            description: 'Tr√°m b√≠t ·ªëng t·ªßy'
          }
        ],
        isActive: true
      },
      {
        name: 'Nh·ªï rƒÉng kh√¥n',
        description: 'Nh·ªï rƒÉng kh√¥n m·ªçc l·ªách ho·∫∑c g√¢y ƒëau',
        category: 'Ph·∫´u thu·∫≠t',
        price: 1200000,
        process: [
          {
            step: 1,
            title: 'Kh√°m v√† ch·ª•p X-quang',
            description: 'ƒê√°nh gi√° v·ªã tr√≠ rƒÉng kh√¥n'
          },
          {
            step: 2,
            title: 'G√¢y t√™',
            description: 'G√¢y t√™ v√πng rƒÉng c·∫ßn nh·ªï'
          },
          {
            step: 3,
            title: 'Nh·ªï rƒÉng',
            description: 'Th·ª±c hi·ªán nh·ªï rƒÉng kh√¥n'
          },
          {
            step: 4,
            title: 'Kh√¢u v·∫øt th∆∞∆°ng',
            description: 'Kh√¢u v·∫øt th∆∞∆°ng sau nh·ªï rƒÉng'
          }
        ],
        isActive: true
      },
      {
        name: 'C·∫°o v√¥i rƒÉng',
        description: 'L√†m s·∫°ch v√¥i rƒÉng v√† m·∫£ng b√°m',
        category: 'V·ªá sinh',
        price: 200000,
        process: [
          {
            step: 1,
            title: 'Kh√°m t·ªïng qu√°t',
            description: 'Ki·ªÉm tra t√¨nh tr·∫°ng v√¥i rƒÉng'
          },
          {
            step: 2,
            title: 'C·∫°o v√¥i',
            description: 'S·ª≠ d·ª•ng m√°y si√™u √¢m c·∫°o v√¥i'
          },
          {
            step: 3,
            title: 'ƒê√°nh b√≥ng',
            description: 'ƒê√°nh b√≥ng b·ªÅ m·∫∑t rƒÉng'
          }
        ],
        isActive: true
      },
      {
        name: 'T·∫©y tr·∫Øng rƒÉng',
        description: 'T·∫©y tr·∫Øng rƒÉng b·∫±ng c√¥ng ngh·ªá laser',
        category: 'Th·∫©m m·ªπ',
        price: 2000000,
        process: [
          {
            step: 1,
            title: 'Kh√°m v√† t∆∞ v·∫•n',
            description: 'ƒê√°nh gi√° t√¨nh tr·∫°ng rƒÉng'
          },
          {
            step: 2,
            title: 'L√†m s·∫°ch rƒÉng',
            description: 'C·∫°o v√¥i v√† l√†m s·∫°ch rƒÉng'
          },
          {
            step: 3,
            title: 'T·∫©y tr·∫Øng',
            description: 'S·ª≠ d·ª•ng gel t·∫©y tr·∫Øng v√† laser'
          },
          {
            step: 4,
            title: 'Ho√†n thi·ªán',
            description: 'ƒê√°nh b√≥ng v√† ho√†n thi·ªán'
          }
        ],
        isActive: true
      }
    ];

    const createdServices = await Service.insertMany(services);
    console.log('‚úÖ Services created:', createdServices.length);
    return createdServices;
  } catch (error) {
    console.error('Error creating services:', error);
    return [];
  }
};

// Create doctor schedules
const createDoctorSchedules = async (doctors, locations) => {
  try {
    console.log('üìÖ Creating doctor schedules...');
    
    const schedules = [];
    const today = new Date();
    
    // Create schedules for the next 30 days
    for (let i = 0; i < 30; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      
      // Skip Sundays
      if (date.getDay() === 0) continue;
      
      // Create schedules for each doctor
      doctors.forEach((doctor, index) => {
        const location = locations[index % locations.length];
        
        // Morning shift (8:00 - 12:00)
        schedules.push({
          doctor: doctor._id,
          location: location._id,
          date: new Date(date),
          startTime: '08:00',
          endTime: '12:00',
          isAvailable: true,
          notes: 'Ca s√°ng',
          createdBy: doctor._id,
          breakTime: {
            startTime: '10:00',
            endTime: '10:15'
          }
        });
        
        // Afternoon shift (13:00 - 17:00)
        schedules.push({
          doctor: doctor._id,
          location: location._id,
          date: new Date(date),
          startTime: '13:00',
          endTime: '17:00',
          isAvailable: true,
          notes: 'Ca chi·ªÅu',
          createdBy: doctor._id,
          breakTime: {
            startTime: '15:00',
            endTime: '15:15'
          }
        });
      });
    }

    const createdSchedules = await DoctorSchedule.insertMany(schedules);
    console.log('‚úÖ Doctor schedules created:', createdSchedules.length);
    return createdSchedules;
  } catch (error) {
    console.error('Error creating doctor schedules:', error);
    return [];
  }
};

// Create appointments
const createAppointments = async (doctors, patients, schedules) => {
  try {
    console.log('üìù Creating appointments...');
    
    const appointments = [];
    const today = new Date();
    
    // Create appointments for the next 7 days
    for (let i = 0; i < 7; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      
      // Skip Sundays
      if (date.getDay() === 0) continue;
      
      // Create 2-3 appointments per day
      const appointmentsPerDay = Math.floor(Math.random() * 2) + 2;
      
      for (let j = 0; j < appointmentsPerDay; j++) {
        const doctor = doctors[Math.floor(Math.random() * doctors.length)];
        const patient = patients[Math.floor(Math.random() * patients.length)];
        
        // Find a suitable schedule for this doctor and date
        const doctorSchedule = schedules.find(s => 
          s.doctor.toString() === doctor._id.toString() &&
          s.date.toDateString() === date.toDateString()
        );
        
        if (doctorSchedule) {
          const timeSlots = ['08:00', '09:00', '10:00', '11:00', '13:00', '14:00', '15:00', '16:00'];
          const startTime = timeSlots[Math.floor(Math.random() * timeSlots.length)];
          
          // Calculate end time (1 hour later)
          const startTimeMinutes = parseInt(startTime.split(':')[0]) * 60 + parseInt(startTime.split(':')[1]);
          const endTimeMinutes = startTimeMinutes + 60;
          const endHour = Math.floor(endTimeMinutes / 60);
          const endMinute = endTimeMinutes % 60;
          const endTime = `${endHour.toString().padStart(2, '0')}:${endMinute.toString().padStart(2, '0')}`;
          
          const statuses = ['pending', 'confirmed', 'cancelled'];
          const status = statuses[Math.floor(Math.random() * statuses.length)];
          
          appointments.push({
            appointmentId: `APT${String(appointments.length + 1).padStart(6, '0')}`,
            doctor: doctor._id,
            patient: patient._id,
            schedule: doctorSchedule._id,
            appointmentDate: new Date(date),
            startTime: startTime,
            endTime: endTime,
            reasonForVisit: [
              'ƒêau rƒÉng',
              'Kh√°m t·ªïng qu√°t',
              'Tr√°m rƒÉng',
              'C·∫°o v√¥i rƒÉng',
              'T·∫©y tr·∫Øng rƒÉng',
              'Nh·ªï rƒÉng kh√¥n'
            ][Math.floor(Math.random() * 6)],
            status: status,
            paymentStatus: status === 'cancelled' ? 'pending' : 'paid',
            totalAmount: Math.floor(Math.random() * 1000000) + 100000
          });
        }
      }
    }

    const createdAppointments = await Appointment.insertMany(appointments);
    console.log('‚úÖ Appointments created:', createdAppointments.length);
    return createdAppointments;
  } catch (error) {
    console.error('Error creating appointments:', error);
    return [];
  }
};

// Create medical records
const createMedicalRecords = async (doctors, patients, appointments) => {
  try {
    console.log('üìã Creating medical records...');
    
    const medicalRecords = [];
    
    // Create medical records for confirmed appointments
    const confirmedAppointments = appointments.filter(apt => apt.status === 'confirmed');
    
    confirmedAppointments.forEach((appointment, index) => {
      const doctor = doctors.find(d => d._id.toString() === appointment.doctor.toString());
      const patient = patients.find(p => p._id.toString() === appointment.patient.toString());
      
      if (doctor && patient) {
        medicalRecords.push({
          recordId: `MR${String(index + 1).padStart(6, '0')}`,
          patient: patient._id,
          doctor: doctor._id,
          appointment: appointment._id,
          visitDate: appointment.appointmentDate,
          chiefComplaint: appointment.reasonForVisit,
          presentIllness: 'B·ªánh nh√¢n ƒë·∫øn kh√°m v·ªõi tri·ªáu ch·ª©ng ƒëau rƒÉng, kh√≥ ch·ªãu khi ƒÉn u·ªëng.',
          clinicalExamination: {
            generalAppearance: 'T·ªët',
            vitalSigns: {
              bloodPressure: '120/80',
              heartRate: 72,
              temperature: 36.5,
              respiratoryRate: 16
            },
            oralExamination: {
              teeth: {
                condition: 'RƒÉng c√≥ d·∫•u hi·ªáu s√¢u',
                missingTeeth: [],
                filledTeeth: ['RƒÉng s·ªë 6'],
                decayedTeeth: ['RƒÉng s·ªë 7']
              },
              gums: {
                condition: 'N∆∞·ªõu h∆°i s∆∞ng',
                bleeding: true,
                swelling: true
              },
              tongue: {
                condition: 'B√¨nh th∆∞·ªùng',
                coating: 'Nh·∫π'
              },
              mucosa: {
                condition: 'B√¨nh th∆∞·ªùng',
                lesions: []
              }
            },
            dentalExamination: {
              occlusion: 'B√¨nh th∆∞·ªùng',
              tmj: 'Kh√¥ng c√≥ v·∫•n ƒë·ªÅ',
              periodontal: 'Vi√™m n∆∞·ªõu nh·∫π',
              endodontic: 'C·∫ßn ƒëi·ªÅu tr·ªã t·ªßy',
              orthodontic: 'Kh√¥ng c·∫ßn ch·ªânh nha'
            }
          },
          diagnosis: {
            primary: 'S√¢u rƒÉng s·ªë 7',
            secondary: ['Vi√™m n∆∞·ªõu nh·∫π'],
            differential: ['Vi√™m t·ªßy rƒÉng', '√Åp xe rƒÉng']
          },
          treatmentPlan: {
            immediate: ['Tr√°m rƒÉng s√¢u', 'C·∫°o v√¥i rƒÉng'],
            shortTerm: ['Theo d√µi t√¨nh tr·∫°ng rƒÉng'],
            longTerm: ['V·ªá sinh rƒÉng mi·ªáng ƒë·ªãnh k·ª≥'],
            followUp: {
              nextVisit: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 1 week later
              interval: '1 tu·∫ßn',
              instructions: 'V·ªá sinh rƒÉng mi·ªáng k·ªπ, tr√°nh ƒÉn ƒë·ªì ng·ªçt'
            }
          },
          treatmentPerformed: [
            {
              procedure: 'Tr√°m rƒÉng composite',
              date: appointment.appointmentDate,
              notes: 'Tr√°m rƒÉng s·ªë 7 b·∫±ng composite',
              materials: ['Composite', 'Bonding agent'],
              cost: 300000
            }
          ],
          notes: 'B·ªánh nh√¢n h·ª£p t√°c t·ªët trong qu√° tr√¨nh ƒëi·ªÅu tr·ªã.',
          status: 'completed',
          followUpRequired: true,
          followUpDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
          followUpNotes: 'Ki·ªÉm tra t√¨nh tr·∫°ng rƒÉng sau ƒëi·ªÅu tr·ªã',
          createdBy: doctor._id,
          lastUpdatedBy: doctor._id
        });
      }
    });

    const createdMedicalRecords = await MedicalRecord.insertMany(medicalRecords);
    console.log('‚úÖ Medical records created:', createdMedicalRecords.length);
    return createdMedicalRecords;
  } catch (error) {
    console.error('Error creating medical records:', error);
    return [];
  }
};

// Main seeding function
const seedData = async () => {
  try {
    await connectDB();
    
    console.log('üå± Starting data seeding...');
    
    // Clear existing data
    await clearData();
    
    // Create data in order
    const locations = await createLocations();
    const { adminUser, doctorUsers, patientUsers } = await createUsers();
    const doctors = await createDoctors(doctorUsers, locations);
    const patients = await createPatients(patientUsers);
    const services = await createServices();
    const schedules = await createDoctorSchedules(doctors, locations);
    const appointments = await createAppointments(doctors, patients, schedules);
    const medicalRecords = await createMedicalRecords(doctors, patients, appointments);
    
    console.log('\nüéâ Data seeding completed successfully!');
    console.log('\nüìä Summary:');
    console.log(`- Locations: ${locations.length}`);
    console.log(`- Users: ${1 + doctorUsers.length + patientUsers.length} (1 admin, ${doctorUsers.length} doctors, ${patientUsers.length} patients)`);
    console.log(`- Doctors: ${doctors.length}`);
    console.log(`- Patients: ${patients.length}`);
    console.log(`- Services: ${services.length}`);
    console.log(`- Schedules: ${schedules.length}`);
    console.log(`- Appointments: ${appointments.length}`);
    console.log(`- Medical Records: ${medicalRecords.length}`);
    
    console.log('\nüîë Test Accounts:');
    console.log('Admin: admin@dentalclinic.com / admin123');
    console.log('Doctor 1: doctor1@dentalclinic.com / doctor123');
    console.log('Doctor 2: doctor2@dentalclinic.com / doctor123');
    console.log('Doctor 3: doctor3@dentalclinic.com / doctor123');
    console.log('Patient 1: patient1@example.com / patient123');
    console.log('Patient 2: patient2@example.com / patient123');
    console.log('Patient 3: patient3@example.com / patient123');
    console.log('Patient 4: patient4@example.com / patient123');
    console.log('Patient 5: patient5@example.com / patient123');
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error seeding data:', error);
    process.exit(1);
  }
};

// Run seeding
if (require.main === module) {
  seedData();
}

module.exports = { seedData };
